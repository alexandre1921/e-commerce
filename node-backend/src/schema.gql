# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregatePack {
  _avg: PackAvgAggregate
  _count: PackCountAggregate
  _max: PackMaxAggregate
  _min: PackMinAggregate
  _sum: PackSumAggregate
}

type AggregateProduct {
  _avg: ProductAvgAggregate
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
  _sum: ProductSumAggregate
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input BigIntFieldUpdateOperationsInput {
  decrement: BigInt
  divide: BigInt
  increment: BigInt
  multiply: BigInt
  set: BigInt
}

input BigIntFilter {
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
  not: NestedBigIntFilter
  notIn: [BigInt!]
}

input BigIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedBigIntFilter
  _min: NestedBigIntFilter
  _sum: NestedBigIntFilter
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
  not: NestedBigIntWithAggregatesFilter
  notIn: [BigInt!]
}

"""
GraphQL Scalar representing the Prisma.Decimal type, based on Decimal.js library.
"""
scalar Decimal

input DecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input DecimalWithAggregatesFilter {
  _avg: NestedDecimalFilter
  _count: NestedIntFilter
  _max: NestedDecimalFilter
  _min: NestedDecimalFilter
  _sum: NestedDecimalFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalWithAggregatesFilter
  notIn: [Decimal!]
}

type Mutation {
  createManyPack(data: [PackCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyProduct(data: [ProductCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOnePack(data: PackCreateInput!): Pack!
  createOneProduct(data: ProductCreateInput!): Product!
  deleteManyPack(where: PackWhereInput): AffectedRowsOutput!
  deleteManyProduct(where: ProductWhereInput): AffectedRowsOutput!
  deleteOnePack(where: PackWhereUniqueInput!): Pack
  deleteOneProduct(where: ProductWhereUniqueInput!): Product
  updateManyPack(data: PackUpdateManyMutationInput!, where: PackWhereInput): AffectedRowsOutput!
  updateManyProduct(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): AffectedRowsOutput!
  updateOnePack(data: PackUpdateInput!, where: PackWhereUniqueInput!): Pack
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  upsertOnePack(create: PackCreateInput!, update: PackUpdateInput!, where: PackWhereUniqueInput!): Pack!
  upsertOneProduct(create: ProductCreateInput!, update: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
}

input NestedBigIntFilter {
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
  not: NestedBigIntFilter
  notIn: [BigInt!]
}

input NestedBigIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedBigIntFilter
  _min: NestedBigIntFilter
  _sum: NestedBigIntFilter
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
  not: NestedBigIntWithAggregatesFilter
  notIn: [BigInt!]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedDecimalWithAggregatesFilter {
  _avg: NestedDecimalFilter
  _count: NestedIntFilter
  _max: NestedDecimalFilter
  _min: NestedDecimalFilter
  _sum: NestedDecimalFilter
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalWithAggregatesFilter
  notIn: [Decimal!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Pack {
  id: BigInt!
  packId: BigInt!
  productId: BigInt!
  qty: BigInt!
}

type PackAvgAggregate {
  id: Float
  packId: Float
  productId: Float
  qty: Float
}

input PackAvgOrderByAggregateInput {
  id: SortOrder
  packId: SortOrder
  productId: SortOrder
  qty: SortOrder
}

type PackCountAggregate {
  _all: Int!
  id: Int!
  packId: Int!
  productId: Int!
  qty: Int!
}

input PackCountOrderByAggregateInput {
  id: SortOrder
  packId: SortOrder
  productId: SortOrder
  qty: SortOrder
}

input PackCreateInput {
  id: BigInt
  pack: ProductCreateNestedOneWithoutPacksAsPackInput!
  product: ProductCreateNestedOneWithoutPacksAsProductInput!
  qty: BigInt!
}

input PackCreateManyInput {
  id: BigInt
  packId: BigInt!
  productId: BigInt!
  qty: BigInt!
}

input PackCreateManyPackInput {
  id: BigInt
  productId: BigInt!
  qty: BigInt!
}

input PackCreateManyPackInputEnvelope {
  data: [PackCreateManyPackInput!]!
  skipDuplicates: Boolean
}

input PackCreateManyProductInput {
  id: BigInt
  packId: BigInt!
  qty: BigInt!
}

input PackCreateManyProductInputEnvelope {
  data: [PackCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input PackCreateNestedManyWithoutPackInput {
  connect: [PackWhereUniqueInput!]
  connectOrCreate: [PackCreateOrConnectWithoutPackInput!]
  create: [PackCreateWithoutPackInput!]
  createMany: PackCreateManyPackInputEnvelope
}

input PackCreateNestedManyWithoutProductInput {
  connect: [PackWhereUniqueInput!]
  connectOrCreate: [PackCreateOrConnectWithoutProductInput!]
  create: [PackCreateWithoutProductInput!]
  createMany: PackCreateManyProductInputEnvelope
}

input PackCreateOrConnectWithoutPackInput {
  create: PackCreateWithoutPackInput!
  where: PackWhereUniqueInput!
}

input PackCreateOrConnectWithoutProductInput {
  create: PackCreateWithoutProductInput!
  where: PackWhereUniqueInput!
}

input PackCreateWithoutPackInput {
  id: BigInt
  product: ProductCreateNestedOneWithoutPacksAsProductInput!
  qty: BigInt!
}

input PackCreateWithoutProductInput {
  id: BigInt
  pack: ProductCreateNestedOneWithoutPacksAsPackInput!
  qty: BigInt!
}

type PackGroupBy {
  _avg: PackAvgAggregate
  _count: PackCountAggregate
  _max: PackMaxAggregate
  _min: PackMinAggregate
  _sum: PackSumAggregate
  id: BigInt!
  packId: BigInt!
  productId: BigInt!
  qty: BigInt!
}

input PackListRelationFilter {
  every: PackWhereInput
  none: PackWhereInput
  some: PackWhereInput
}

type PackMaxAggregate {
  id: BigInt
  packId: BigInt
  productId: BigInt
  qty: BigInt
}

input PackMaxOrderByAggregateInput {
  id: SortOrder
  packId: SortOrder
  productId: SortOrder
  qty: SortOrder
}

type PackMinAggregate {
  id: BigInt
  packId: BigInt
  productId: BigInt
  qty: BigInt
}

input PackMinOrderByAggregateInput {
  id: SortOrder
  packId: SortOrder
  productId: SortOrder
  qty: SortOrder
}

input PackOrderByRelationAggregateInput {
  _count: SortOrder
}

input PackOrderByWithAggregationInput {
  _avg: PackAvgOrderByAggregateInput
  _count: PackCountOrderByAggregateInput
  _max: PackMaxOrderByAggregateInput
  _min: PackMinOrderByAggregateInput
  _sum: PackSumOrderByAggregateInput
  id: SortOrder
  packId: SortOrder
  productId: SortOrder
  qty: SortOrder
}

input PackOrderByWithRelationInput {
  id: SortOrder
  pack: ProductOrderByWithRelationInput
  packId: SortOrder
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  qty: SortOrder
}

enum PackScalarFieldEnum {
  id
  packId
  productId
  qty
}

input PackScalarWhereInput {
  AND: [PackScalarWhereInput!]
  NOT: [PackScalarWhereInput!]
  OR: [PackScalarWhereInput!]
  id: BigIntFilter
  packId: BigIntFilter
  productId: BigIntFilter
  qty: BigIntFilter
}

input PackScalarWhereWithAggregatesInput {
  AND: [PackScalarWhereWithAggregatesInput!]
  NOT: [PackScalarWhereWithAggregatesInput!]
  OR: [PackScalarWhereWithAggregatesInput!]
  id: BigIntWithAggregatesFilter
  packId: BigIntWithAggregatesFilter
  productId: BigIntWithAggregatesFilter
  qty: BigIntWithAggregatesFilter
}

type PackSumAggregate {
  id: BigInt
  packId: BigInt
  productId: BigInt
  qty: BigInt
}

input PackSumOrderByAggregateInput {
  id: SortOrder
  packId: SortOrder
  productId: SortOrder
  qty: SortOrder
}

input PackUpdateInput {
  id: BigIntFieldUpdateOperationsInput
  pack: ProductUpdateOneRequiredWithoutPacksAsPackNestedInput
  product: ProductUpdateOneRequiredWithoutPacksAsProductNestedInput
  qty: BigIntFieldUpdateOperationsInput
}

input PackUpdateManyMutationInput {
  id: BigIntFieldUpdateOperationsInput
  qty: BigIntFieldUpdateOperationsInput
}

input PackUpdateManyWithWhereWithoutPackInput {
  data: PackUpdateManyMutationInput!
  where: PackScalarWhereInput!
}

input PackUpdateManyWithWhereWithoutProductInput {
  data: PackUpdateManyMutationInput!
  where: PackScalarWhereInput!
}

input PackUpdateManyWithoutPackNestedInput {
  connect: [PackWhereUniqueInput!]
  connectOrCreate: [PackCreateOrConnectWithoutPackInput!]
  create: [PackCreateWithoutPackInput!]
  createMany: PackCreateManyPackInputEnvelope
  delete: [PackWhereUniqueInput!]
  deleteMany: [PackScalarWhereInput!]
  disconnect: [PackWhereUniqueInput!]
  set: [PackWhereUniqueInput!]
  update: [PackUpdateWithWhereUniqueWithoutPackInput!]
  updateMany: [PackUpdateManyWithWhereWithoutPackInput!]
  upsert: [PackUpsertWithWhereUniqueWithoutPackInput!]
}

input PackUpdateManyWithoutProductNestedInput {
  connect: [PackWhereUniqueInput!]
  connectOrCreate: [PackCreateOrConnectWithoutProductInput!]
  create: [PackCreateWithoutProductInput!]
  createMany: PackCreateManyProductInputEnvelope
  delete: [PackWhereUniqueInput!]
  deleteMany: [PackScalarWhereInput!]
  disconnect: [PackWhereUniqueInput!]
  set: [PackWhereUniqueInput!]
  update: [PackUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [PackUpdateManyWithWhereWithoutProductInput!]
  upsert: [PackUpsertWithWhereUniqueWithoutProductInput!]
}

input PackUpdateWithWhereUniqueWithoutPackInput {
  data: PackUpdateWithoutPackInput!
  where: PackWhereUniqueInput!
}

input PackUpdateWithWhereUniqueWithoutProductInput {
  data: PackUpdateWithoutProductInput!
  where: PackWhereUniqueInput!
}

input PackUpdateWithoutPackInput {
  id: BigIntFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutPacksAsProductNestedInput
  qty: BigIntFieldUpdateOperationsInput
}

input PackUpdateWithoutProductInput {
  id: BigIntFieldUpdateOperationsInput
  pack: ProductUpdateOneRequiredWithoutPacksAsPackNestedInput
  qty: BigIntFieldUpdateOperationsInput
}

input PackUpsertWithWhereUniqueWithoutPackInput {
  create: PackCreateWithoutPackInput!
  update: PackUpdateWithoutPackInput!
  where: PackWhereUniqueInput!
}

input PackUpsertWithWhereUniqueWithoutProductInput {
  create: PackCreateWithoutProductInput!
  update: PackUpdateWithoutProductInput!
  where: PackWhereUniqueInput!
}

input PackWhereInput {
  AND: [PackWhereInput!]
  NOT: [PackWhereInput!]
  OR: [PackWhereInput!]
  id: BigIntFilter
  pack: ProductRelationFilter
  packId: BigIntFilter
  product: ProductRelationFilter
  productId: BigIntFilter
  qty: BigIntFilter
}

input PackWhereUniqueInput {
  AND: [PackWhereInput!]
  NOT: [PackWhereInput!]
  OR: [PackWhereInput!]
  id: BigInt
  pack: ProductRelationFilter
  packId: BigIntFilter
  product: ProductRelationFilter
  productId: BigIntFilter
  qty: BigIntFilter
}

type Product {
  _count: ProductCount
  code: BigInt!
  costPrice: Decimal!
  name: String!
  packsAsPack(cursor: PackWhereUniqueInput, distinct: [PackScalarFieldEnum!], orderBy: [PackOrderByWithRelationInput!], skip: Int, take: Int, where: PackWhereInput): [Pack!]!
  packsAsProduct(cursor: PackWhereUniqueInput, distinct: [PackScalarFieldEnum!], orderBy: [PackOrderByWithRelationInput!], skip: Int, take: Int, where: PackWhereInput): [Pack!]!
  salesPrice: Decimal!
}

type ProductAvgAggregate {
  code: Float
  costPrice: Decimal
  salesPrice: Decimal
}

input ProductAvgOrderByAggregateInput {
  code: SortOrder
  costPrice: SortOrder
  salesPrice: SortOrder
}

type ProductCount {
  packsAsPack(where: PackWhereInput): Int!
  packsAsProduct(where: PackWhereInput): Int!
}

type ProductCountAggregate {
  _all: Int!
  code: Int!
  costPrice: Int!
  name: Int!
  salesPrice: Int!
}

input ProductCountOrderByAggregateInput {
  code: SortOrder
  costPrice: SortOrder
  name: SortOrder
  salesPrice: SortOrder
}

input ProductCreateInput {
  code: BigInt!
  costPrice: Decimal!
  name: String!
  packsAsPack: PackCreateNestedManyWithoutPackInput
  packsAsProduct: PackCreateNestedManyWithoutProductInput
  salesPrice: Decimal!
}

input ProductCreateManyInput {
  code: BigInt!
  costPrice: Decimal!
  name: String!
  salesPrice: Decimal!
}

input ProductCreateNestedOneWithoutPacksAsPackInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutPacksAsPackInput
  create: ProductCreateWithoutPacksAsPackInput
}

input ProductCreateNestedOneWithoutPacksAsProductInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutPacksAsProductInput
  create: ProductCreateWithoutPacksAsProductInput
}

input ProductCreateOrConnectWithoutPacksAsPackInput {
  create: ProductCreateWithoutPacksAsPackInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutPacksAsProductInput {
  create: ProductCreateWithoutPacksAsProductInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutPacksAsPackInput {
  code: BigInt!
  costPrice: Decimal!
  name: String!
  packsAsProduct: PackCreateNestedManyWithoutProductInput
  salesPrice: Decimal!
}

input ProductCreateWithoutPacksAsProductInput {
  code: BigInt!
  costPrice: Decimal!
  name: String!
  packsAsPack: PackCreateNestedManyWithoutPackInput
  salesPrice: Decimal!
}

type ProductGroupBy {
  _avg: ProductAvgAggregate
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
  _sum: ProductSumAggregate
  code: BigInt!
  costPrice: Decimal!
  name: String!
  salesPrice: Decimal!
}

type ProductMaxAggregate {
  code: BigInt
  costPrice: Decimal
  name: String
  salesPrice: Decimal
}

input ProductMaxOrderByAggregateInput {
  code: SortOrder
  costPrice: SortOrder
  name: SortOrder
  salesPrice: SortOrder
}

type ProductMinAggregate {
  code: BigInt
  costPrice: Decimal
  name: String
  salesPrice: Decimal
}

input ProductMinOrderByAggregateInput {
  code: SortOrder
  costPrice: SortOrder
  name: SortOrder
  salesPrice: SortOrder
}

input ProductOrderByWithAggregationInput {
  _avg: ProductAvgOrderByAggregateInput
  _count: ProductCountOrderByAggregateInput
  _max: ProductMaxOrderByAggregateInput
  _min: ProductMinOrderByAggregateInput
  _sum: ProductSumOrderByAggregateInput
  code: SortOrder
  costPrice: SortOrder
  name: SortOrder
  salesPrice: SortOrder
}

input ProductOrderByWithRelationInput {
  code: SortOrder
  costPrice: SortOrder
  name: SortOrder
  packsAsPack: PackOrderByRelationAggregateInput
  packsAsProduct: PackOrderByRelationAggregateInput
  salesPrice: SortOrder
}

input ProductRelationFilter {
  is: ProductWhereInput
  isNot: ProductWhereInput
}

enum ProductScalarFieldEnum {
  code
  costPrice
  name
  salesPrice
}

input ProductScalarWhereWithAggregatesInput {
  AND: [ProductScalarWhereWithAggregatesInput!]
  NOT: [ProductScalarWhereWithAggregatesInput!]
  OR: [ProductScalarWhereWithAggregatesInput!]
  code: BigIntWithAggregatesFilter
  costPrice: DecimalWithAggregatesFilter
  name: StringWithAggregatesFilter
  salesPrice: DecimalWithAggregatesFilter
}

type ProductSumAggregate {
  code: BigInt
  costPrice: Decimal
  salesPrice: Decimal
}

input ProductSumOrderByAggregateInput {
  code: SortOrder
  costPrice: SortOrder
  salesPrice: SortOrder
}

input ProductUpdateInput {
  code: BigIntFieldUpdateOperationsInput
  costPrice: DecimalFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  packsAsPack: PackUpdateManyWithoutPackNestedInput
  packsAsProduct: PackUpdateManyWithoutProductNestedInput
  salesPrice: DecimalFieldUpdateOperationsInput
}

input ProductUpdateManyMutationInput {
  code: BigIntFieldUpdateOperationsInput
  costPrice: DecimalFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  salesPrice: DecimalFieldUpdateOperationsInput
}

input ProductUpdateOneRequiredWithoutPacksAsPackNestedInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutPacksAsPackInput
  create: ProductCreateWithoutPacksAsPackInput
  update: ProductUpdateToOneWithWhereWithoutPacksAsPackInput
  upsert: ProductUpsertWithoutPacksAsPackInput
}

input ProductUpdateOneRequiredWithoutPacksAsProductNestedInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutPacksAsProductInput
  create: ProductCreateWithoutPacksAsProductInput
  update: ProductUpdateToOneWithWhereWithoutPacksAsProductInput
  upsert: ProductUpsertWithoutPacksAsProductInput
}

input ProductUpdateToOneWithWhereWithoutPacksAsPackInput {
  data: ProductUpdateWithoutPacksAsPackInput!
  where: ProductWhereInput
}

input ProductUpdateToOneWithWhereWithoutPacksAsProductInput {
  data: ProductUpdateWithoutPacksAsProductInput!
  where: ProductWhereInput
}

input ProductUpdateWithoutPacksAsPackInput {
  code: BigIntFieldUpdateOperationsInput
  costPrice: DecimalFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  packsAsProduct: PackUpdateManyWithoutProductNestedInput
  salesPrice: DecimalFieldUpdateOperationsInput
}

input ProductUpdateWithoutPacksAsProductInput {
  code: BigIntFieldUpdateOperationsInput
  costPrice: DecimalFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  packsAsPack: PackUpdateManyWithoutPackNestedInput
  salesPrice: DecimalFieldUpdateOperationsInput
}

input ProductUpsertWithoutPacksAsPackInput {
  create: ProductCreateWithoutPacksAsPackInput!
  update: ProductUpdateWithoutPacksAsPackInput!
  where: ProductWhereInput
}

input ProductUpsertWithoutPacksAsProductInput {
  create: ProductCreateWithoutPacksAsProductInput!
  update: ProductUpdateWithoutPacksAsProductInput!
  where: ProductWhereInput
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  code: BigIntFilter
  costPrice: DecimalFilter
  name: StringFilter
  packsAsPack: PackListRelationFilter
  packsAsProduct: PackListRelationFilter
  salesPrice: DecimalFilter
}

input ProductWhereUniqueInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  code: BigInt
  costPrice: DecimalFilter
  name: StringFilter
  packsAsPack: PackListRelationFilter
  packsAsProduct: PackListRelationFilter
  salesPrice: DecimalFilter
}

type Query {
  aggregatePack(cursor: PackWhereUniqueInput, orderBy: [PackOrderByWithRelationInput!], skip: Int, take: Int, where: PackWhereInput): AggregatePack!
  aggregateProduct(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): AggregateProduct!
  findFirstPack(cursor: PackWhereUniqueInput, distinct: [PackScalarFieldEnum!], orderBy: [PackOrderByWithRelationInput!], skip: Int, take: Int, where: PackWhereInput): Pack
  findFirstPackOrThrow(cursor: PackWhereUniqueInput, distinct: [PackScalarFieldEnum!], orderBy: [PackOrderByWithRelationInput!], skip: Int, take: Int, where: PackWhereInput): Pack
  findFirstProduct(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product
  findFirstProductOrThrow(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product
  getPack(where: PackWhereUniqueInput!): Pack
  getProduct(where: ProductWhereUniqueInput!): Product
  groupByPack(by: [PackScalarFieldEnum!]!, having: PackScalarWhereWithAggregatesInput, orderBy: [PackOrderByWithAggregationInput!], skip: Int, take: Int, where: PackWhereInput): [PackGroupBy!]!
  groupByProduct(by: [ProductScalarFieldEnum!]!, having: ProductScalarWhereWithAggregatesInput, orderBy: [ProductOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductWhereInput): [ProductGroupBy!]!
  pack(where: PackWhereUniqueInput!): Pack
  packs(cursor: PackWhereUniqueInput, distinct: [PackScalarFieldEnum!], orderBy: [PackOrderByWithRelationInput!], skip: Int, take: Int, where: PackWhereInput): [Pack!]!
  product(where: ProductWhereUniqueInput!): Product
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}